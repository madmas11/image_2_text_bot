# version 2.0 inline keyboard + voice message
import glob
import os

import pydub
import pytesseract
import speech_recognition as sr
import telebot
from dotenv import load_dotenv
from exception import UnknownValueError
from pdf2image import convert_from_path
from telebot import types

load_dotenv()
token = os.getenv('TOKEN')
bot = telebot.TeleBot(token)

tesseract_path = os.getenv('TESSERACT_PATH')
config = os.getenv('TESSERACT_CONFIG')
pytesseract.pytesseract.tesseract_cmd = tesseract_path
image_path = os.getenv('IMAGE_PATH')

pdfs = glob.glob(os.getenv('PDF_PATH'))
pdf_file = os.getenv('PDF_FILE')

voice_path = os.getenv('VOICE_PATH')
tg_in_file = os.getenv('TELEGRAM_VOICE_IN')
tg_out_file = os.getenv('TELEGRAM_VOICE_OUT')
whatsApp_out_file = os.getenv('WHATSAPP_VOICE_OUT')


@bot.message_handler(commands=['start'])
def start_message(message):
    """–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞."""
    buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton('/image')
    button_2 = types.KeyboardButton('/pdf')
    button_3 = types.KeyboardButton('/voice')
    buttons.add(button_1, button_2, button_3)
    bot.send_message(
        message.chat.id,
        '–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª!'
    )
    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
        reply_markup=buttons
    )


@bot.message_handler(commands=['image'])
def image2text(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–æ—Ä —è–∑—ã–∫–∞."""
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button_1 = types.InlineKeyboardButton(
        '–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='but_1')
    button_2 = types.InlineKeyboardButton(
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß', callback_data='but_2')
    button_3 = types.InlineKeyboardButton(
        '–°–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫ üá∑üá∫+üá¨üáß', callback_data='but_3')
    buttons.add(button_1, button_2).row(button_3)
    bot.send_message(
        message.chat.id,
        '–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ —è–∑—ã–∫.',
        reply_markup=buttons
    )


@bot.message_handler(commands=['pdf'])
def pdf2text(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ PDF. –í—ã–±–æ—Ä —è–∑—ã–∫–∞."""
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button_1 = types.InlineKeyboardButton(
        '–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='but_4')
    button_2 = types.InlineKeyboardButton(
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß', callback_data='but_5')
    button_3 = types.InlineKeyboardButton(
        '–°–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫ üá∑üá∫+üá¨üáß', callback_data='but_6')
    buttons.add(button_1, button_2).row(button_3)
    bot.send_message(
        message.chat.id,
        '–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç PDF. –í—ã–±–µ—Ä–∏ —è–∑—ã–∫.',
        reply_markup=buttons
    )


@bot.message_handler(commands=['voice'])
def voice2text(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–æ—Ä —è–∑—ã–∫–∞."""
    buttons = types.InlineKeyboardMarkup(row_width=2)
    lang_rus = types.InlineKeyboardButton(
        '–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='but_7')
    lang_eng = types.InlineKeyboardButton(
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß', callback_data='but_8')
    buttons.add(lang_rus, lang_eng)
    bot.send_message(
        message.chat.id,
        '–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ —è–∑—ã–∫.',
        reply_markup=buttons
    )


@bot.callback_query_handler(func=lambda call: call.data in [
    'but_1', 'but_2', 'but_3'])
def img(call):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ InlineKeyboard –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    global lang
    if call.data == 'but_1':
        lang = 'rus'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.')
    elif call.data == 'but_2':
        lang = 'eng'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.')
    elif call.data == 'but_3':
        lang = 'rus+eng'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω —Å–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫.')
    send = bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.')
    bot.register_next_step_handler(send, hendle_photo)


@bot.callback_query_handler(func=lambda call: call.data in [
    'but_4', 'but_5', 'but_6'])
def pdf(call):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ InlineKeyboard –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ PDF."""
    global lang
    if call.data == 'but_4':
        lang = 'rus'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.')
    elif call.data == 'but_5':
        lang = 'eng'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.')
    elif call.data == 'but_6':
        lang = 'rus+eng'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω —Å–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫.')
    send = bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª PDF.')
    bot.register_next_step_handler(send, hendle_pdf)


@bot.callback_query_handler(func=lambda call: call.data in ['but_7', 'but_8'])
def voice(call):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ InlineKeyboard –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    global lang
    if call.data == 'but_7':
        lang = 'ru_RU'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.')
    elif call.data == 'but_8':
        lang = 'en_EN'
        bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.')
    send = bot.send_message(
        call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
    )
    bot.register_next_step_handler(send, hendle_voice)


@bot.message_handler(content_types=['photo', 'text'])
def hendle_photo(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    if message.content_type == 'photo':
        if len(message.photo) <= 2:
            photo_size = message.photo[1].file_id
        else:
            photo_size = message.photo[2].file_id
        file_info = bot.get_file(photo_size).file_path
        downloaded_file = bot.download_file(file_info)
        with open('image.jpg', 'wb') as new_file:
            new_file.write(downloaded_file)
        get_text(message, image_path, language=lang)
    elif message.content_type == 'text':
        if message.text == '/start':
            return start_message(message)
        elif message.text == '/image':
            return image2text(message)
        elif message.text == '/pdf':
            return pdf2text(message)
        elif message.text == '/voice':
            return voice2text(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ –ø–∏—à–∏ –≤ —á–∞—Ç! –ï—Å—Ç—å –∂–µ –∫–Ω–æ–ø–∫–∏.')
    else:
        msg = bot.send_message(
            message.chat.id,
            '–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
        )
        bot.register_next_step_handler(msg, hendle_photo)
        return


@bot.message_handler(content_types=['document', 'text'])
def hendle_pdf(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    if message.content_type == 'document':
        document_id = message.document.file_id
        file_info = bot.get_file(document_id).file_path
        downloaded_file = bot.download_file(file_info)
        with open(pdf_file, 'wb') as new_file:
            new_file.write(downloaded_file)

        for pdf_path in pdfs:
            pages = convert_from_path(pdf_path, 500)
            for pageNum, path in enumerate(pages):
                text = pytesseract.image_to_string(path, lang=lang)
                with open(f'{pdf_path[:-4]}_page{pageNum}.txt', 'w') as the_file:
                    the_file.write(text)
                    bot.send_message(message.chat.id, text)
    elif message.content_type == 'text':
        if message.text == '/start':
            return start_message(message)
        elif message.text == '/pdf':
            return pdf2text(message)
        elif message.text == '/image':
            return image2text(message)
        elif message.text == '/voice':
            return voice2text(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ –ø–∏—à–∏ –≤ —á–∞—Ç! –ï—Å—Ç—å –∂–µ –∫–Ω–æ–ø–∫–∏.')
    else:
        msg = bot.send_message(
            message.chat.id,
            '–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF —Ñ–∞–π–ª.'
        )
        bot.register_next_step_handler(msg, hendle_pdf)
        return


@bot.message_handler(content_types=['voice', 'audio', 'text'])
def hendle_voice(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ telagram –∏ whatsApp
    –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    if message.content_type == 'voice':
        voice_id = message.voice.file_id
        file_info = bot.get_file(voice_id).file_path
        downloaded_file = bot.download_file(file_info)
        with open(voice_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        ogg_audio = pydub.AudioSegment.from_file(tg_in_file, format='ogg')
        ogg_audio.export(tg_out_file, format='wav')
        voice_to_text(message, 'voice.wav', lang)
    elif message.content_type == 'text':
        if message.text == '/start':
            return start_message(message)
        elif message.text == '/pdf':
            return pdf2text(message)
        elif message.text == '/image':
            return image2text(message)
        elif message.text == '/voice':
            return voice2text(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ –ø–∏—à–∏ –≤ —á–∞—Ç! –ï—Å—Ç—å –∂–µ –∫–Ω–æ–ø–∫–∏.')
    elif message.content_type == 'audio':
        audio_id = message.audio.file_id
        audio_info = bot.get_file(audio_id).file_path
        downloaded_audio = bot.download_file(audio_info)
        fname = os.path.basename(audio_info)
        with open(fname, 'wb') as new_file:
            new_file.write(downloaded_audio)

        ogg_audio = pydub.AudioSegment.from_file(fname, format='m4a')
        ogg_audio.export(whatsApp_out_file, format='wav')
        voice_to_text(message, whatsApp_out_file, lang)
        os.remove(fname)
        os.remove('file_81.wav')
        os.remove('voice.wav')
        os.remove('voice.ogg')
    else:
        msg = bot.send_message(
            message.chat.id,
            '–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
        )
        bot.register_next_step_handler(msg, hendle_voice)
        return


def voice_to_text(message, name, lang):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –≤ —á–∞—Ç"""
    r = sr.Recognizer()
    msg = sr.AudioFile(name)
    with msg as source:
        audio = r.record(source)
        try:
            result = r.recognize_google(audio, language=lang)
            bot.send_message(message.chat.id, '–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç!')
            bot.send_message(message.chat.id, result)
        except UnknownValueError:
            raise UnknownValueError(bot.send_message(
                message.chat.id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∞—É–¥–∏–æ.'))


def get_text(message, path, language):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –≤ —á–∞—Ç"""
    text = pytesseract.image_to_string(path, lang=language, config=config)
    if text == '':
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç.')
    else:
        print(text)
        bot.send_message(message.chat.id, '–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç!')
        bot.send_message(message.chat.id, text)


bot.infinity_polling(none_stop=True)
